{"version":3,"sources":["../src/index.js"],"names":["path","require","MyThingy","express","app","bodyParser","cors","socket","cv","CAMERA_ENABLED","use","__dirname","urlencoded","extended","json","http","Server","mt","mongoClient","MongoClient","mongo","dbname","url","mongoOptions","useNewUrlParser","db","connectMongo","Promise","resolve","reject","console","log","connect","err","client","readData","collection","find","toArray","data","Array","isArray","length","get","req","res","then","params","name","state","switchHs100","result","switchRadio","switchLight","sendFile","join","cameraStatus","cameraHandle","io","wCap","myIo","VideoCapture","set","CAP_PROP_FRAME_HEIGHT","CAP_PROP_FRAME_WIDTH","startCamera","stopCamera","emit","FPS","setInterval","frame","read","image","imencode","toString","getDataUpdates","startServices","startSensors","uuid","connectThingy","thingy","status","listen"],"mappings":"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","sourcesContent":["// Import required packages\nconst path = require('path');\nconst MyThingy = require('./iot');\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst socket = require('socket.io');\nconst cv = require('opencv4nodejs');\nconst CAMERA_ENABLED = 1;\n\napp.use(\n    express.static(__dirname + '/public'),\n    bodyParser.urlencoded({extended: true}),\n    bodyParser.json(),\n    cors()\n);\nconst http = require('http').Server(app);\n\n\n\nlet mt;\n\n\nconst mongoClient = require('mongodb').MongoClient;\n\nconst mongo = {\n    dbname: 'sensor_data',\n    url: 'mongodb://localhost:27017',\n    mongoOptions: {useNewUrlParser: true},\n};\nlet db = null;\n\nfunction connectMongo() {\n    return new Promise(function (resolve, reject) {\n        if (db) {\n            return resolve(db);\n        }\n        console.log(mongo);\n        mongoClient.connect(mongo.url, mongo.mongoOptions, (err, client) => {\n            if (err) {\n                reject(err)\n            } else {\n                console.log('Mongodb connected to : ' + mongo.dbname);\n                db = client.db(mongo.dbname);\n                resolve(db);\n            }\n        });\n    })\n}\n\nfunction readData() {\n    return new Promise(function (resolve, reject) {\n        db.collection('nt52').find({}).toArray((err, data) => {\n            if (err) {\n                console.log(err);\n                reject(err);\n            } else {\n                console.log('data: ', Array.isArray(data), data.length);\n                resolve(data);\n            }\n        });\n    });\n}\n\napp.get('/api/v1/data', async (req, res) => {\n    await connectMongo()\n        .then(() => readData()\n            .then((data) => res.json(data)));\n});\n\napp.get('/api/v1/service/:name/:state', async (req, res) => {\n    const {name, state} = req.params;\n    console.log(req.params, name, state);\n    let result;\n    if (mt === null) return res.json({state: 0});\n\n    switch (name) {\n        case 'hs100':\n            result = await mt.switchHs100(state);\n            return res.json({state: result});\n        case 'radio':\n            result = await mt.switchRadio(state);\n            return res.json({state: result});\n        case 'light':\n            console.log('Inside switch light', state)\n            result = await mt.switchLight(state);\n            return res.json({state: result});\n    }\n});\n\napp.get('/', (req, res) => {\n    res.sendFile(path.join(__dirname, 'public/index.html'));\n});\n\n\nvar cameraStatus = 0;\nvar cameraHandle = 0;\nlet io, wCap, myIo = null;\n\nio = socket(http);\nwCap = new cv.VideoCapture(0);\nwCap.set(cv.CAP_PROP_FRAME_HEIGHT, 100);\nwCap.set(cv.CAP_PROP_FRAME_WIDTH, 100);\n\nfunction startCamera() {\n    myIo = io;\n}\n\nfunction stopCamera() {\n    myIo = { emit : () => null};\n}\nconst FPS = 20;\n\nstartCamera();\ncameraHandle = setInterval(() => {\n    const frame = wCap.read();\n    const image = cv.imencode('.jpg', frame).toString('base64');\n    myIo.emit('image', image);\n}, 1000 / FPS);\nconsole.log('Started camera');\n\nconst getDataUpdates = (data) => {\n    console.log('getDataUpdates');\n\n    if (data && cameraStatus === 0) {\n        cameraStatus = 1;\n        console.log('Started camera');\n        startCamera();\n\n    } else {\n        // clearInterval(cameraHandle);\n        cameraStatus = 0;\n        console.log('Stopped camera');\n        stopCamera();\n    }\n};\n\n\nfunction startServices() {\n    return new Promise((resolve, reject) => {\n        mt.startSensors(getDataUpdates).then(() => resolve(mt.uuid));\n    });\n}\n\nfunction connectThingy() {\n    console.log('Connecting to thingy22');\n\n    return new Promise((resolve, reject) => {\n\n        mt = new MyThingy();\n        mt.connect().then((thingy) => resolve(thingy))\n    });\n}\n\n// simulate\nsetInterval(() => {\n    console.log('inside set interval')\n    getDataUpdates(!cameraStatus);\n}, 4000);\n\n\n\nconnectThingy().then((thingy) => startServices(thingy).then((status) => console.log('ThingyStatus : ' + status)));\nhttp.listen(5555, () => console.log('Server started on port ' + 5555));\n\n\n\n\n"],"file":"index.js"}