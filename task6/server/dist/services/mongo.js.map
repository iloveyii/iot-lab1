{"version":3,"sources":["../../src/services/mongo.js"],"names":["mongoClient","require","MongoClient","mongo","dbname","url","mongoOptions","useNewUrlParser","db","connectMongo","Promise","resolve","reject","console","log","connect","err","client","insertIntoMongo","d","_id","collection","insertOne","result","insert","then"],"mappings":";;;;;;;AAAA,IAAMA,WAAW,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,WAAvC;;AAEA,IAAMC,KAAK,GAAG;AACVC,EAAAA,MAAM,EAAE,aADE;AAEVC,EAAAA,GAAG,EAAE,2BAFK;AAGVC,EAAAA,YAAY,EAAE;AAACC,IAAAA,eAAe,EAAE;AAAlB;AAHJ,CAAd;AAKA,IAAIC,EAAE,GAAG,IAAT;;AAEA,SAASC,YAAT,GAAwB;AACpB,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,QAAGJ,EAAH,EAAO;AAAE,aAAOG,OAAO,CAACH,EAAD,CAAd;AAAoB;;AAC7BK,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACAH,IAAAA,WAAW,CAACe,OAAZ,CAAoBZ,KAAK,CAACE,GAA1B,EAA+BF,KAAK,CAACG,YAArC,EAAmD,UAACU,GAAD,EAAMC,MAAN,EAAiB;AAChE,UAAID,GAAJ,EAAS;AACLJ,QAAAA,MAAM,CAACI,GAAD,CAAN;AACH,OAFD,MAEO;AACHH,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BX,KAAK,CAACC,MAA9C;AACAI,QAAAA,EAAE,GAAGS,MAAM,CAACT,EAAP,CAAUL,KAAK,CAACC,MAAhB,CAAL;AACAO,QAAAA,OAAO,CAACH,EAAD,CAAP;AACH;AACJ,KARD;AASH,GAZM,CAAP;AAaH;;AAED,SAASU,eAAT,CAAyBC,CAAzB,EAA4B;AACxB,SAAO,IAAIT,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1CO,IAAAA,CAAC,CAACC,GAAF,IAAS,OAAOD,CAAC,CAAC,KAAD,CAAjB;AACAX,IAAAA,EAAE,CAACa,UAAH,CAAc,MAAd,EAAsBC,SAAtB,CAAgCH,CAAhC,EAAmC,UAACH,GAAD,EAAMO,MAAN,EAAiB;AAChD,UAAIP,GAAJ,EAAS;AACLJ,QAAAA,MAAM,CAACI,GAAD,CAAN;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACH,OAHD,MAGO;AACHG,QAAAA,CAAC,GAAG,EAAJ;AACAR,QAAAA,OAAO,CAACQ,CAAD,CAAP;AACH;AACJ,KARD;AASH,GAXM,CAAP;AAYH;;AAED,SAASK,MAAT,CAAgBL,CAAhB,EAAmB;AACfV,EAAAA,YAAY,GACPgB,IADL,CACU;AAAA,WAAMP,eAAe,CAACC,CAAD,CAAf,CACPM,IADO,CACF;AAAA,aAAKN,CAAC,GAAC,EAAP;AAAA,KADE,CAAN;AAAA,GADV;AAGH;;eAEcK,M","sourcesContent":["const mongoClient = require('mongodb').MongoClient;\n\nconst mongo = {\n    dbname: 'sensor_data',\n    url: 'mongodb://localhost:27017',\n    mongoOptions: {useNewUrlParser: true},\n};\nlet db = null;\n\nfunction connectMongo() {\n    return new Promise(function (resolve, reject) {\n        if(db) { return resolve(db);}\n        console.log(mongo);\n        mongoClient.connect(mongo.url, mongo.mongoOptions, (err, client) => {\n            if (err) {\n                reject(err)\n            } else {\n                console.log('Mongodb connected to : ' + mongo.dbname);\n                db = client.db(mongo.dbname);\n                resolve(db);\n            }\n        });\n    })\n}\n\nfunction insertIntoMongo(d) {\n    return new Promise(function (resolve, reject) {\n        d._id && delete d['_id'];\n        db.collection('nt52').insertOne(d, (err, result) => {\n            if (err) {\n                reject(err);\n                console.log(err);\n            } else {\n                d = {};\n                resolve(d);\n            }\n        });\n    });\n}\n\nfunction insert(d) {\n    connectMongo()\n        .then(() => insertIntoMongo(d)\n            .then(()=> d={}));\n}\n\nexport default insert;\n"],"file":"mongo.js"}